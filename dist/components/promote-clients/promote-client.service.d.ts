import { ChannelsService } from '../channels/channels.service';
import { OnModuleDestroy } from '@nestjs/common';
import { Model } from 'mongoose';
import { CreatePromoteClientDto } from './dto/create-promote-client.dto';
import { PromoteClient, PromoteClientDocument } from './schemas/promote-client.schema';
import { TelegramService } from '../Telegram/Telegram.service';
import { UsersService } from '../users/users.service';
import { ActiveChannelsService } from '../active-channels/active-channels.service';
import { ClientService } from '../clients/client.service';
import { UpdatePromoteClientDto } from './dto/update-promote-client.dto';
import { BufferClientService } from '../buffer-clients/buffer-client.service';
import { SessionService } from '../session-manager';
export declare class PromoteClientService implements OnModuleDestroy {
    private promoteClientModel;
    private telegramService;
    private usersService;
    private activeChannelsService;
    private clientService;
    private channelsService;
    private bufferClientService;
    private sessionService;
    private readonly logger;
    private joinChannelMap;
    private joinChannelIntervalId;
    private leaveChannelMap;
    private leaveChannelIntervalId;
    private isLeaveChannelProcessing;
    private isJoinChannelProcessing;
    private readonly JOIN_CHANNEL_INTERVAL;
    private readonly LEAVE_CHANNEL_INTERVAL;
    private readonly LEAVE_CHANNEL_BATCH_SIZE;
    private readonly MAX_NEW_PROMOTE_CLIENTS_PER_TRIGGER;
    constructor(promoteClientModel: Model<PromoteClientDocument>, telegramService: TelegramService, usersService: UsersService, activeChannelsService: ActiveChannelsService, clientService: ClientService, channelsService: ChannelsService, bufferClientService: BufferClientService, sessionService: SessionService);
    create(promoteClient: CreatePromoteClientDto): Promise<PromoteClient>;
    findAll(): Promise<PromoteClient[]>;
    findOne(mobile: string, throwErr?: boolean): Promise<PromoteClient>;
    update(mobile: string, updateClientDto: UpdatePromoteClientDto): Promise<PromoteClient>;
    createOrUpdate(mobile: string, createOrUpdateUserDto: CreatePromoteClientDto | UpdatePromoteClientDto): Promise<PromoteClient>;
    remove(mobile: string): Promise<void>;
    search(filter: any): Promise<PromoteClient[]>;
    executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<PromoteClient[]>;
    removeFromPromoteMap(key: string): void;
    clearPromoteMap(): void;
    joinchannelForPromoteClients(skipExisting?: boolean): Promise<string>;
    joinChannelQueue(): Promise<void>;
    clearJoinChannelInterval(): void;
    removeFromLeaveMap(key: string): void;
    clearLeaveMap(): void;
    leaveChannelQueue(): Promise<void>;
    clearLeaveChannelInterval(): void;
    setAsPromoteClient(mobile: string, availableDate?: string): Promise<string>;
    checkPromoteClients(): Promise<void>;
    addNewUserstoPromoteClients(badIds: string[], goodIds: string[], clientsNeedingPromoteClients?: string[], promoteClientsPerClient?: Map<string, number>): Promise<void>;
    onModuleDestroy(): Promise<void>;
    getPromoteClientDistribution(): Promise<{
        totalPromoteClients: number;
        unassignedPromoteClients: number;
        distributionPerClient: Array<{
            clientId: string;
            assignedCount: number;
            needed: number;
            status: 'sufficient' | 'needs_more';
        }>;
        summary: {
            clientsWithSufficientPromoteClients: number;
            clientsNeedingPromoteClients: number;
            totalPromoteClientsNeeded: number;
            maxPromoteClientsPerTrigger: number;
            triggersNeededToSatisfyAll: number;
        };
    }>;
}
