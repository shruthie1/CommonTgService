import { ChannelsService } from './../channels/channels.service';
import { OnModuleDestroy } from '@nestjs/common';
import { Model } from 'mongoose';
import { CreateBufferClientDto } from './dto/create-buffer-client.dto';
import { BufferClient, BufferClientDocument } from './schemas/buffer-client.schema';
import { TelegramService } from '../Telegram/Telegram.service';
import { UsersService } from '../users/users.service';
import { ActiveChannelsService } from '../active-channels/active-channels.service';
import { ClientService } from '../clients/client.service';
import { UpdateBufferClientDto } from './dto/update-buffer-client.dto';
import { PromoteClientService } from '../promote-clients/promote-client.service';
import { SessionService } from '../session-manager';
import { SearchBufferClientDto } from './dto/search-buffer- client.dto';
import { Client } from '../clients';
import { BotsService } from '../bots';
export declare class BufferClientService implements OnModuleDestroy {
    private bufferClientModel;
    private telegramService;
    private usersService;
    private activeChannelsService;
    private clientService;
    private channelsService;
    private promoteClientService;
    private sessionService;
    private botsService;
    private readonly logger;
    private joinChannelMap;
    private joinChannelIntervalId;
    private leaveChannelMap;
    private leaveChannelIntervalId;
    private isJoinChannelProcessing;
    private isLeaveChannelProcessing;
    private updateCount;
    private activeTimeouts;
    private readonly JOIN_CHANNEL_INTERVAL;
    private readonly LEAVE_CHANNEL_INTERVAL;
    private readonly LEAVE_CHANNEL_BATCH_SIZE;
    private readonly CLIENT_PROCESSING_DELAY;
    private readonly CHANNEL_PROCESSING_DELAY;
    private readonly MAX_MAP_SIZE;
    private readonly CLEANUP_INTERVAL;
    private readonly MAX_NEEDED;
    private readonly MAX_NEW_BUFFER_CLIENTS_PER_TRIGGER;
    private readonly MAX_NEEDED_BUFFER_CLIENTS_PER_CLIENT;
    private cleanupIntervalId;
    constructor(bufferClientModel: Model<BufferClientDocument>, telegramService: TelegramService, usersService: UsersService, activeChannelsService: ActiveChannelsService, clientService: ClientService, channelsService: ChannelsService, promoteClientService: PromoteClientService, sessionService: SessionService, botsService: BotsService);
    onModuleDestroy(): Promise<void>;
    private cleanup;
    private startMemoryCleanup;
    private clearMemoryCleanup;
    private performMemoryCleanup;
    private createTimeout;
    private clearAllTimeouts;
    create(bufferClient: CreateBufferClientDto): Promise<BufferClientDocument>;
    findAll(status?: 'active' | 'inactive'): Promise<BufferClientDocument[]>;
    findOne(mobile: string, throwErr?: boolean): Promise<BufferClientDocument>;
    update(mobile: string, updateClientDto: UpdateBufferClientDto): Promise<BufferClientDocument>;
    createOrUpdate(mobile: string, createorUpdateBufferClientDto: CreateBufferClientDto | UpdateBufferClientDto): Promise<BufferClientDocument>;
    remove(mobile: string, message?: string): Promise<void>;
    search(filter: SearchBufferClientDto): Promise<BufferClientDocument[]>;
    executeQuery(query: any, sort?: any, limit?: number, skip?: number): Promise<BufferClientDocument[]>;
    removeFromBufferMap(key: string): void;
    private safeSetJoinChannelMap;
    private safeSetLeaveChannelMap;
    clearBufferMap(): void;
    updateStatus(mobile: string, status: string, message?: string): Promise<BufferClientDocument>;
    markAsInactive(mobile: string, reason: string): Promise<BufferClientDocument>;
    updateInfo(): Promise<void>;
    joinchannelForBufferClients(skipExisting?: boolean, clientId?: string): Promise<string>;
    joinChannelQueue(): Promise<void>;
    private processJoinChannelInterval;
    private processJoinChannelSequentially;
    clearJoinChannelInterval(): void;
    removeFromLeaveMap(key: string): void;
    clearLeaveMap(): void;
    leaveChannelQueue(): Promise<void>;
    private processLeaveChannelInterval;
    private processLeaveChannelSequentially;
    clearLeaveChannelInterval(): void;
    setAsBufferClient(mobile: string, clientId: string, availableDate?: string): Promise<string>;
    checkBufferClients(): Promise<void>;
    processBufferClient(doc: BufferClient, client: Client): Promise<number>;
    addNewUserstoBufferClients(badIds: string[], goodIds: string[], clientsNeedingBufferClients?: string[], bufferClientsPerClient?: Map<string, number>): Promise<void>;
    updateAllClientSessions(): Promise<void>;
    getBufferClientsByClientId(clientId: string, status?: string): Promise<BufferClientDocument[]>;
    getBufferClientDistribution(): Promise<{
        totalBufferClients: number;
        unassignedBufferClients: number;
        activeBufferClients: number;
        inactiveBufferClients: number;
        distributionPerClient: Array<{
            clientId: string;
            assignedCount: number;
            activeCount: number;
            inactiveCount: number;
            needed: number;
            status: 'sufficient' | 'needs_more';
            neverUsed: number;
            usedInLast24Hours: number;
        }>;
        summary: {
            clientsWithSufficientBufferClients: number;
            clientsNeedingBufferClients: number;
            totalBufferClientsNeeded: number;
            maxBufferClientsPerTrigger: number;
            triggersNeededToSatisfyAll: number;
        };
    }>;
    getBufferClientsByStatus(status: string): Promise<BufferClient[]>;
    getBufferClientsWithMessages(): Promise<Array<{
        mobile: string;
        status: string;
        message: string;
        clientId?: string;
        lastUsed?: Date;
    }>>;
    getLeastRecentlyUsedBufferClients(clientId: string, limit?: number): Promise<BufferClient[]>;
    getNextAvailableBufferClient(clientId: string): Promise<BufferClientDocument | null>;
    getUnusedBufferClients(hoursAgo?: number, clientId?: string): Promise<BufferClientDocument[]>;
    getUsageStatistics(clientId?: string): Promise<{
        totalClients: number;
        neverUsed: number;
        usedInLast24Hours: number;
        usedInLastWeek: number;
        averageUsageGap: number;
    }>;
    markAsUsed(mobile: string, message?: string): Promise<BufferClientDocument>;
}
